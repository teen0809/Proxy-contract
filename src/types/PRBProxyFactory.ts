/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export interface PRBProxyFactoryInterface extends utils.Interface {
  functions: {
    "deploy()": FunctionFragment;
    "deployFor(address)": FunctionFragment;
    "getNextSeed(address)": FunctionFragment;
    "isProxy(address)": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "deploy"
      | "deployFor"
      | "getNextSeed"
      | "isProxy"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "deploy", values?: undefined): string;
  encodeFunctionData(functionFragment: "deployFor", values: [string]): string;
  encodeFunctionData(functionFragment: "getNextSeed", values: [string]): string;
  encodeFunctionData(functionFragment: "isProxy", values: [string]): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "deploy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deployFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNextSeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isProxy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "DeployProxy(address,address,address,bytes32,bytes32,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DeployProxy"): EventFragment;
}

export interface DeployProxyEventObject {
  origin: string;
  deployer: string;
  owner: string;
  seed: string;
  salt: string;
  proxy: string;
}
export type DeployProxyEvent = TypedEvent<
  [string, string, string, string, string, string],
  DeployProxyEventObject
>;

export type DeployProxyEventFilter = TypedEventFilter<DeployProxyEvent>;

export interface PRBProxyFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PRBProxyFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deploy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployFor(
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getNextSeed(
      eoa: string,
      overrides?: CallOverrides
    ): Promise<[string] & { nextSeed: string }>;

    isProxy(
      proxy: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { result: boolean }>;

    version(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployFor(
    owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getNextSeed(eoa: string, overrides?: CallOverrides): Promise<string>;

  isProxy(proxy: string, overrides?: CallOverrides): Promise<boolean>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    deploy(overrides?: CallOverrides): Promise<string>;

    deployFor(owner: string, overrides?: CallOverrides): Promise<string>;

    getNextSeed(eoa: string, overrides?: CallOverrides): Promise<string>;

    isProxy(proxy: string, overrides?: CallOverrides): Promise<boolean>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "DeployProxy(address,address,address,bytes32,bytes32,address)"(
      origin?: string | null,
      deployer?: string | null,
      owner?: string | null,
      seed?: null,
      salt?: null,
      proxy?: null
    ): DeployProxyEventFilter;
    DeployProxy(
      origin?: string | null,
      deployer?: string | null,
      owner?: string | null,
      seed?: null,
      salt?: null,
      proxy?: null
    ): DeployProxyEventFilter;
  };

  estimateGas: {
    deploy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployFor(
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getNextSeed(eoa: string, overrides?: CallOverrides): Promise<BigNumber>;

    isProxy(proxy: string, overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    deploy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployFor(
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getNextSeed(
      eoa: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isProxy(
      proxy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
