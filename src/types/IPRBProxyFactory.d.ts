/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IPRBProxyFactoryInterface extends ethers.utils.Interface {
  functions: {
    "deploy()": FunctionFragment;
    "deployFor(address)": FunctionFragment;
    "getNextSeed(address)": FunctionFragment;
    "isProxy(address)": FunctionFragment;
    "version()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "deploy", values?: undefined): string;
  encodeFunctionData(functionFragment: "deployFor", values: [string]): string;
  encodeFunctionData(functionFragment: "getNextSeed", values: [string]): string;
  encodeFunctionData(functionFragment: "isProxy", values: [string]): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "deploy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deployFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNextSeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isProxy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "DeployProxy(address,address,address,bytes32,bytes32,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DeployProxy"): EventFragment;
}

export type DeployProxyEvent = TypedEvent<
  [string, string, string, string, string, string] & {
    origin: string;
    deployer: string;
    owner: string;
    seed: string;
    salt: string;
    proxy: string;
  }
>;

export class IPRBProxyFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IPRBProxyFactoryInterface;

  functions: {
    deploy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployFor(
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getNextSeed(
      eoa: string,
      overrides?: CallOverrides
    ): Promise<[string] & { result: string }>;

    isProxy(
      proxy: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { result: boolean }>;

    version(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployFor(
    owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getNextSeed(eoa: string, overrides?: CallOverrides): Promise<string>;

  isProxy(proxy: string, overrides?: CallOverrides): Promise<boolean>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    deploy(overrides?: CallOverrides): Promise<string>;

    deployFor(owner: string, overrides?: CallOverrides): Promise<string>;

    getNextSeed(eoa: string, overrides?: CallOverrides): Promise<string>;

    isProxy(proxy: string, overrides?: CallOverrides): Promise<boolean>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "DeployProxy(address,address,address,bytes32,bytes32,address)"(
      origin?: string | null,
      deployer?: string | null,
      owner?: string | null,
      seed?: null,
      salt?: null,
      proxy?: null
    ): TypedEventFilter<
      [string, string, string, string, string, string],
      {
        origin: string;
        deployer: string;
        owner: string;
        seed: string;
        salt: string;
        proxy: string;
      }
    >;

    DeployProxy(
      origin?: string | null,
      deployer?: string | null,
      owner?: string | null,
      seed?: null,
      salt?: null,
      proxy?: null
    ): TypedEventFilter<
      [string, string, string, string, string, string],
      {
        origin: string;
        deployer: string;
        owner: string;
        seed: string;
        salt: string;
        proxy: string;
      }
    >;
  };

  estimateGas: {
    deploy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployFor(
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getNextSeed(eoa: string, overrides?: CallOverrides): Promise<BigNumber>;

    isProxy(proxy: string, overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    deploy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployFor(
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getNextSeed(
      eoa: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isProxy(
      proxy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
